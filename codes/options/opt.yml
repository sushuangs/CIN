#
train/test: train      # train or test

#
subfolder: gtos_I      # str or None


#
train:
  #
  manual_seed: 
  device_ids: [0]
  os_environ: '0'
  batch_size: 16
  num_workers: 16
  epoch: 20
  set_start_epoch: 1
  start_step: 1
  # log
  logs_per_step: 20
  logTest_per_step: 5
  # step
  val:
    per_epoch: 1
    logs_per_step: 10
  #
  checkpoint_per_epoch: 1
  # save
  saveTrainImgs_per_step: 100      # train
  saveValImgs_in_step: 1            # val
  saveTestImgs_per_step: 100        # test
  saveStacked: true         # true
  saveFormat: '.jpg'     #'.png'   
  msg_save: False
  #
  resume: 
    one_pth:   true
    Partial:   true      # resume saved partial weight, parameters no saved in .pth are automatically initialized 
    Empty:     true      # resume None



#
lr:
  #
  start_lr: 0.0001   # SGD-0.01, Adam-0.0001
  milestones: [3000, 50000, 1000000]  
  # optimizer: SGD  
  optimizer: Adam
  gamma: 0.1


#
loss:
  #
  option: lamd   # lamd /  Auto_lamd
  #
  lamd:  # lw[Rec, Enc, Msg]
    # 
    milestones_Rec: [500, 500, 1000000] 
    Rec: [1, 1, 0] 
    #
    milestones_Eec: [500, 500, 1000000] 
    Eec: [1, 1, 1]
    #
    milestones_Msg: [500, 500, 1000000] 
    Msg: [0.1, 0.01, 0.01]
  #
  type:
    TypeRecImg: 'l2'   #  l1 \ l2
    TyptRecMsg: 'mse'  # mse \ bce \ bce_logits
    TyprEncoded: 'l2'  #  l1 \ l2


#
noise:
  #
  StrengthFactor:
    S: 1
  #
  option: 'Identity' #'Combined'
  #
  Identity:
  #
  GaussianBlur:
    kernel_sizes: 7
    sigmas: 2
  #
  Salt_Pepper:
    snr: 0.9     # Probability of the original image (pixel wise)
    p:  1.0      # Datasets Picture adds noise according to probability p
  #
  GaussianNoise:
    mean: 0
    variance: 1
    amplitude: 0.25
    p: 1
  #
  Resize:
    p: 0.5
    interpolation_method: 'nearest'
  #
  Jpeg:
    Q: 50
    subsample: 2
  #
  JpegTest:
    Q: 50
    subsample: 2
  #
  Dropout:
    p: 0.3
  #
  Cropout:
    # p: 0.09     # 9% of total pixel
    p: 0.3
  #
  Crop:
    # p: 0.01     # 1% of total pixel
    p: 0.035
  #
  Brightness: 
    f : 2    # 2    while 2 increases the brightness by a factor of 2.
  Contrast:
    f : 2    # 2
  Saturation:
    f : 2    # 2
  Hue :
    f : 0.1    # 0.1 
  #
  Rotation:
    degrees: 180   # 180    # the range of degrees select from will be (-degrees, +degrees)
    p: 1
  #
  Affine:
    degrees: 0  # the range of degrees select from will be (-degrees, +degrees)
    translate: 0.1   # 0.1
    scale: [0.7,0.7]  # 0.7
    shear: 30   # 30
    p: 1
  #
  Combined:  
    # combine all noise
    names: [ 'JpegTest', 'Crop', 'Cropout', 'Resize', 'GaussianBlur', 'Salt_Pepper', 'GaussianNoise', 'Dropout', 'Brightness', 'Contrast', 'Saturation', 'Hue']
  #
  Superposition: 
    shuffle: true
    si_pool: ['Identity', 'Resize', 'GaussianBlur', 'Salt_Pepper', 'GaussianNoise', 'Cropout', 'Dropout', 'Saturation', 'Contrast']


#
path:
  # logs
  logs_folder:        '../watermarking_'
  folder_temp:

  # coco2017
  train_folder:       '/data/experiment/data/gtos128_500/train'
  test_folder:        '/data/experiment/data/gtos128_500/val'
  #
  resume_state_1pth:  '/data/experiment/model/CIN/watermarking_CIN/experiments/experiment_CIN/demo/-2025-02-26-15:39-train/path_checkpoint/epoch-1_step-613-cinNet.pth'



#
datasets:
  #
  # nDatasets: 
  #   num: 10000  #10600
  #   nTrain: 0.98       #    nDatasets x nTrain
  #   nval: 0.02         #    nDatasets x (1-nTrain)
  # #
  # test:
  #   num: 1000   # coco
  #   # num: 100      # div2k
  # #
  msg:              # np.random.choice([ , ])
    mod_a: true        # [0, 1]
    mod_b: False         # [-1, 1]
  H: 128 
  W: 128



#### network (blocks)
network:
  input:
    num_of_imgs: 1
    in_img_nc: 3
  InvBlock:
    type: DBNet
    block_num: 16
    split1_img: 12        #  split_len1 * pow(4, down_num)
    split2_repeat: 12     # 
    downscaling: 
      use_down: true
      use_conv1x1: False
      in_nc: 3
      current_cn: 3
      down_num: 1          # 1  or  2
      scale: 0.5      
      type: haar
  #
  cs:
    in_nc: 3
    out_nc: 3
  #  
  H: 128      # 16  # 24  # 128,  0.188*0.188=3.5%-128*0.188=24
  W: 128      # 16  # 24  # 128
  message_length: 30   #64      # 30
  #
  RGB2YUV: False
  #
  fusion:
    option: true
    fusion_length: 256    # 16  ->  128  =  32*32   ->  block1-64*64  ->  block2-128*128  
    upconvT_channels: 1
    repeat_channel: 3
    blocks: 3




